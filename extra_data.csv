Questions,Answers
"What is the difference between 'is' and '==' operators in Python?","'is' checks if objects have same identity (memory location), '==' checks if objects have same value"
"How do you handle circular imports in Python?","Use lazy imports inside functions, or move the import statement inside the function that needs it"
"What is the @staticmethod decorator used for in Python?","It defines a method that doesn't need self parameter and doesn't have access to class attributes"
"How does Python's garbage collection work with reference counting?","Python tracks object references and deletes objects when reference count reaches zero"
"What's the difference between __str__ and __repr__ methods?","__str__ is for readable output for end users, __repr__ is for developers and debugging"
"How does Python's Global Interpreter Lock (GIL) affect multithreading?","GIL allows only one thread to execute Python bytecode at a time, limiting CPU-bound parallel processing"
"What's the purpose of the 'yield from' statement in Python generators?","It delegates the generator's iteration to a sub-generator, useful in recursive generators"
"How do context managers work with the 'with' statement internally?","They implement __enter__ and __exit__ methods to manage resource allocation and cleanup"
"What's the difference between *args and **kwargs in function definitions?","*args collects positional arguments into a tuple, **kwargs collects keyword arguments into a dictionary"
"How does Python's decorator chaining order work?","Decorators are applied from bottom to top, with the bottommost decorator executing first"
"How do you create a virtual environment using Python's venv?","Run `python -m venv myenv` to create an environment named 'myenv'"  
"What is duck typing in Python?","Objects are judged by their behavior (methods/properties) rather than their explicit type"  
"How do dictionaries achieve O(1) average lookup time?","They use hash tables that map keys to bucket positions via hashing"  
"What happens during Python's name mangling?","Names prefixed with `__` (e.g., `__var`) are rewritten to `_ClassName__var`"  
"Why use `if __name__ == '__main__'` in scripts?","To execute code only when run directly, not when imported as a module"  
"How do metaclasses differ from regular classes?","Metaclasses define behavior for classes themselves, while classes define object behavior"  
"What is the purpose of `__slots__` in classes?","To explicitly declare attributes, saving memory by preventing per-instance dictionaries"  
"How does `yield` transform a function?","It converts the function into a generator that produces values lazily"  
"What is method resolution order (MRO) in multiple inheritance?","The linearization algorithm (C3) that determines method search sequence"  
"How do you force keyword-only arguments?","Place arguments after `*` or `*args` in the parameter list"  
"Why are tuples hashable but lists not?","Tuples are immutable (required for hash stability), while lists are mutable"  
"How does `sys.path` influence module imports?","It lists directories searched during `import` statements in priority order"  
"What does `@staticmethod` do differently from `@classmethod`?","Static methods don't receive implicit first arguments (neither instance nor class)"  
"How are Python integers implemented internally?","As variable-length objects using C structs to handle arbitrary precision"  
"What is the purpose of the `__call__` method?","It allows class instances to be invoked like functions (e.g., `obj()`)"  
"How do you create an immutable class in Python?","Override `__setattr__` to block attribute changes and use `__slots__`"  
"Why might `is` return False for identical strings?","Due to string interning; non-interned or dynamically created strings may differ"  
"How does `asyncio` achieve concurrency?","Using an event loop to manage asynchronous I/O operations without threads"  
"What is the function of `__init__.py` in packages?","It initializes the package (may contain package-level code or `__all__`)"  
"How do descriptor protocols enable properties?","`@property` uses `__get__`/`__set__` methods to manage attribute access"  
"What is the difference between `__str__` and `__repr__`?","`__str__` is for user-friendly output, `__repr__` is for unambiguous debugging"  
"How does `pickle` serialize custom objects?","By storing the class reference and instance `__dict__` or `__getstate__` output"  
"Why can't mutable objects be dictionary keys?","Their hash could change after insertion, breaking the hash table invariant"  
"How does `functools.lru_cache` optimize functions?","It memoizes recent calls using a least-recently-used eviction policy"  
"What is the purpose of the `__new__` method?","It controls instance creation (before `__init__`), often used for immutable types"  
"How do Python's weak references differ from strong references?","Weak references don't prevent garbage collection of the target object"  
"What is the Global Interpreter Lock (GIL)?","A mutex allowing only one thread to execute Python bytecode at a time"  
"How do you share data between processes in `multiprocessing`?","Using `Queue`, `Pipe`, or shared memory (`Value`/`Array`)"  
"Why use `collections.namedtuple`?","To create tuple subclasses with named fields for readable access"  
"How does `__getattr__` differ from `__getattribute__`?","`__getattr__` handles missing attributes, `__getattribute__` handles all attribute access"  
"What does `sys.getrefcount` reveal about an object?","The number of active references to that object (including the temporary one)"  
"How are Python lists implemented internally?","As dynamic arrays that resize when capacity is exceeded"  
"Why use `itertools.chain`?","To combine multiple iterators into a single sequential iterator"  
"What is monkey patching?","Runtime modification of classes/modules (e.g., adding methods after definition)"  
"How do you create a context manager without a class?","Using `contextlib.contextmanager` with a generator function"  
"What is the purpose of `__del__`?","To define cleanup logic when an object is garbage collected (unreliable)"  
"How does `setdefault()` differ from `defaultdict`?","`setdefault()` handles missing keys per-call, `defaultdict` auto-initializes"  
"Why might `except Exception` catch more than intended?","It catches all non-system-exiting exceptions, including `KeyboardInterrupt`"  
"How do class variables differ from instance variables?","Class variables are shared across instances, instance variables are per-object"  
"What is the function of `__mro__`?","A tuple showing the method resolution order for a class"  
"How do you make an object support the `with` statement?","Implement `__enter__` for setup and `__exit__` for teardown"  
"What is a sentinel value and why use it?","A unique object (e.g., `sentinel = object()`) to denote special states"  
"How does `super()` work in single inheritance?","Returns a proxy to the immediate parent class in the inheritance chain"  
"Why use `__subclasses__()`?","To retrieve all direct child classes of a given class"  
"What is the purpose of `__annotations__`?","Stores type hints for variables, functions, or class attributes"  
"How do you implement a custom iterator?","Define `__iter__` (returns self) and `__next__` (raises `StopIteration`)"  
"What happens when `[] == False` is evaluated?","It returns `False` because lists only compare equal to other lists"  
"How does `enum.Enum` improve over string constants?","Provides type safety, prevents duplicates, and supports iteration"  
"Why use `pathlib.Path` instead of `os.path`?","Offers object-oriented path operations and cleaner syntax"  
"What is the purpose of `__init_subclass__`?","A hook that runs when a subclass is defined"  
"How does `sys.settrace` enable debugging?","It sets a global trace function called for each execution event"  
"Why are default arguments mutable in Python?","Default values are created once at function definition time, not per call"  
"How do you create a read-only property?","Define a property without a setter method"  
"What is the function of `__bases__`?","A tuple containing direct parent classes of a class"  
"How does `threading.local` store thread-specific data?","Uses a dictionary mapped by thread identifier"  
"Why use `@dataclass`?","To auto-generate boilerplate like `__init__` and `__repr__` for data containers"  
"How do you force positional-only arguments?","Place arguments before `/` in the parameter list"  
"What is the purpose of `__getitem__`?","Enables index/slice operations (e.g., `obj[key]`) and iteration"  
"How does `asyncio.create_task()` schedule coroutines?","It adds the coroutine to the event loop for concurrent execution"  
"Why use `__future__` imports?","To enable new language features before they become standard"  
"What is the function of `__code__` in functions?","References the compiled bytecode object of the function"  
"How does `inspect.signature` work?","Returns a Signature object representing a callable's parameters"  
"Why use `functools.singledispatch`?","To create generic functions with different implementations per type"  
"How do you deep-copy an object?","Use `copy.deepcopy()` to recursively copy nested objects"  
"What is the purpose of `__all__` in modules?","Defines the public API for `from module import *`"  
"How does `__import__` differ from `importlib.import_module`?","`__import__` is low-level; `import_module` is preferred for explicit imports"  
"Why might `isinstance(x, tuple)` be safer than `type(x) is tuple`?","It accounts for subclassing (e.g., `namedtuple`)"  
"How do you implement a custom exception hierarchy?","Subclass from `Exception` or built-in exceptions"  
"What is the purpose of `__getstate__` and `__setstate__`?","To customize object serialization for `pickle`"  
"How does `__contains__` enable the `in` operator?","It defines membership test behavior for custom objects"  
"What is a Python wheel?","A built-package format for faster installation than source distributions"  
"How do you create a namespace package?","By omitting `__init__.py` and using PEP 420 implicit namespaces"  
"Why use `typing.Protocol`?","To define structural subtyping (duck typing) for type hints"  
"How does `__index__` customize integer conversion?","Defines how objects convert to integers for slicing/`bin()`/etc."  
"What is the purpose of `__dir__`?","Customizes the output of `dir(object)`"  
"How do you implement a singleton pattern?","Override `__new__` to return the same instance on every creation"  
"Why use `contextlib.suppress`?","To concisely ignore specific exceptions in a context manager"  
"How does `sys.argv` access command-line arguments?","Stores a list of arguments passed to the script"  
"What is the function of `__enter__` in context managers?","Performs setup operations and optionally returns a resource"  
"How do you create a coroutine function?","Define it with `async def` and use `await` inside"  
"What is the purpose of `__delattr__`?","Customizes behavior when deleting attributes (e.g., `del obj.attr`)"  
"How does `@cached_property` (from `functools`) work?","Computes a property once and caches the result on the instance"  
"Why use `__subclasshook__` in ABCs?","To allow non-explicit subclasses to be recognized via duck typing"  
"How do you profile CPU usage in Python?","Use `cProfile.run()` or the `profile` module"  
"What is the function of `__prepare__` in metaclasses?","Creates the namespace dictionary for class creation"  
"How does `weakref.finalize` handle cleanup?","Registers a callback to run when an object is garbage collected"  
"Why use `enum.Flag`?","To create bitmask-style enumerations that support bitwise operations"  
"How do you make an object support arithmetic operators?","Implement special methods like `__add__`, `__mul__`, etc."  
"What is the purpose of `__len__`?","Enables the `len(obj)` built-in function"  
"How does `__set_name__` help descriptors?","Notifies descriptors of the class attribute name they're assigned to"  
"What is a Python egg?","A legacy distribution format superseded by wheels"  
"How do you reload an imported module?","Use `importlib.reload(module)`"  
"Why use `__post_init__` in dataclasses?","To perform validation or setup after auto-generated `__init__`"  
"How does `__format__` customize f-strings?","Defines behavior for format specifiers (e.g., `f"{obj:spec}"`)"  
"What is the purpose of `__getinitargs__`?","Provides arguments for `__init__` during `pickle` reconstruction"  
"How do you create an abstract base class?","Inherit from `abc.ABC` and use `@abstractmethod`"  
"Why use `__call__` on a class?","Makes class instances callable like functions"  
"How does `__ior__` enable `|=`?","Implements in-place bitwise OR operation"  
"What is the function of `__qualname__`?","Shows the fully qualified name of classes/functions"  
"How do you create a thread-local storage?","Use `threading.local()` or `contextvars` for asynchronous contexts"  
"How do you implement a custom memory allocator in Python?","Override `__new__` and use ctypes to manage raw memory blocks"  
"What is the purpose of `__slots__` in exception classes?","Prevents creation of `__dict__` for memory efficiency in frequently raised exceptions"  
"How does Python's cyclic garbage collector detect reference cycles?","Using generational collection with tracked container objects"  
"What is the function of `__wrapped__` attribute?","References the original function when decorated with `functools.wraps`"  
"How do you create a weak reference dictionary?","Use `weakref.WeakValueDictionary` for automatic removal of unreferenced values"  
"What is the difference between `__getattr__` and `__getattribute__`?","`__getattribute__` intercepts all attribute access, `__getattr__` handles missing attributes"  
"How does Python implement integer caching?","Caches integers from -5 to 256 for memory optimization"  
"What is the purpose of `__text_signature__`?","Provides signature metadata for built-in functions and methods"  
"How do you implement a reverse iterator?","Define `__reversed__` method returning a custom iterator"  
"What is the function of `sys.intern()`?","Optimizes string storage by interning frequently used strings"  
"How does `@functools.cached_property` work?","Computes attribute once and caches result on the instance"  
"What is the purpose of `__class_getitem__`?","Enables class to support generic type annotations like `List[int]`"  
"How do you create a context manager that handles multiple resources?","Use `contextlib.ExitStack` for dynamic resource management"  
"What is the role of `__init_subclass__` in plugin systems?","Automatically registers subclasses during class creation"  
"How does Python's descriptor protocol support ORM frameworks?","Descriptors manage attribute access with database interaction logic"  
"What is the purpose of `__mro_entries__`?","Customizes base class processing during class creation"  
"How do you implement a thread-safe singleton?","Use double-checked locking with `threading.Lock`"  
"What is the function of `__index__` method?","Converts objects to integer indexes for slicing operations"  
"How does `asyncio.create_task()` differ from `loop.create_task()`?","`asyncio.create_task()` uses the current event loop automatically"  
"What is the purpose of `__orig_bases__`?","Stores original generic base classes before type erasure"  
"How do you create a coroutine-based generator?","Use `async def` with `yield` for asynchronous generators"  
"What is the role of `__aiter__` in asynchronous iteration?","Returns an asynchronous iterator for `async for` loops"  
"How does Python's GIL affect CPU-bound threads?","Limits parallel execution to single thread for bytecode operations"  
"What is the purpose of `__qualname__`?","Provides fully qualified class/function names including nesting"  
"How do you implement a custom metaprogramming hook?","Override `__prepare__` in metaclasses to customize namespace creation"  
"What is the function of `__set_name__`?","Notifies descriptors of their assigned attribute names"  
"How does `@dataclass` transform classes?","Auto-generates `__init__`, `__repr__`, and comparison methods"  
"What is the purpose of `__post_init__`?","Performs validation after dataclass initialization"  
"How do you create a read-only descriptor?","Implement `__get__` without `__set__` or `__delete__`"  
"What is the role of `__isabstractmethod__`?","Flags abstract methods in ABCs for inheritance checks"  
"How does Python implement dynamic attribute lookup?","Through `__getattr__` fallback and `__dict__` namespace"  
"What is the purpose of `__fspath__`?","Provides filesystem path representation for objects"  
"How do you implement a buffer protocol?","Define `__buffer__` and `__release_buffer__` methods"  
"What is the function of `__array_interface__`?","Provides NumPy array protocol support for custom objects"  
"How does `__reduce_ex__` customize pickling?","Accepts protocol version for backward-compatible serialization"  
"What is the purpose of `__bytes__`?","Returns bytes representation for `bytes()` conversion"  
"How do you create a context manager for temporary directories?","Use `tempfile.TemporaryDirectory` with `with` statement"  
"What is the role of `__traceback__` in exceptions?","Stores stack trace information for debugging"  
"How does `__context__` differ from `__cause__`?","`__context__` is implicit exception chain, `__cause__` is explicit"  
"What is the purpose of `__signature__`?","Stores inspectable function signature metadata"  
"How do you implement a custom import hook?","Create meta path finder implementing `find_spec` method"  
"What is the function of `__loader__`?","References loader object that loaded a module"  
"How does Python optimize method resolution order?","Uses C3 linearization algorithm for multiple inheritance"  
"What is the purpose of `__subclasshook__`?","Allows ABCs to recognize virtual subclasses via duck typing"  
"How do you create a frozen exception class?","Set `__slots__` to empty tuple and override `__setattr__`"  
"What is the role of `__annotations__` in modules?","Stores module-level type annotations"  
"How does `__init__` differ from `__new__` for immutable types?","`__new__` creates instance, `__init__` is redundant for immutables"  
"What is the purpose of `__final__`?","Marks methods/classes as final to prevent overriding/inheritance"  
"How do you implement a custom coroutine runner?","Use `types.coroutine` and manage event loop manually"  
"What is the function of `__await__`?","Returns iterator for awaitable objects in async/await"  
"How does Python implement dynamic scope?","Using `contextvars` for asynchronous context management"  
"What is the purpose of `__class_getitem__` in non-generic classes?","Enables runtime parameterization for type hinting"  
"How do you create a parameterized generic type?","Inherit from `typing.Generic` with type variables"  
"What is the role of `__orig_class__`?","Stores original generic class type information"  
"How does `__init_subclass__` handle keyword arguments?","Passes class keyword arguments to subclass registration"  
"What is the purpose of `__metadata__`?","Stores additional metadata for type annotations"  
"How do you implement a custom async context manager?","Define `__aenter__` and `__aexit__` async methods"  
"What is the function of `__anext__`?","Returns awaitable for next item in async iterators"  
"How does Python optimize string interning?","Automatically interns string literals and identifiers"  
"What is the purpose of `__match_args__`?","Defines positional patterns for structural pattern matching"  
"How do you create a pattern matching guard clause?","Use `if` in `case` statements for conditional matching"  
"What is the role of `__mro_entries__` in typing?","Handles generic type aliases during MRO construction"  
"How does `__init__` work for dataclasses with inheritance?","Auto-collects fields from all base classes in MRO order"  
"What is the purpose of `__dataclass_params__`?","Stores dataclass configuration parameters"  
"How do you implement a descriptor with instance storage?","Use per-instance dictionaries in `__set__` and `__get__`"  
"What is the function of `__set_name__` in class decorators?","Provides attribute name to decorator during class creation"  
"How does Python's method cache work?","Caches method lookups in `__dict__` for faster access"  
"What is the purpose of `__abstractmethods__`?","Stores names of abstract methods in ABCs"  
"How do you create a covariant generic type?","Use `typing.TypeVar` with `covariant=True`"  
"What is the role of `__parameters__`?","Stores type parameters for generic classes"  
"How does `__class_getitem__` enable runtime type checking?","Allows parameterized types to be used in `isinstance`"  
"What is the purpose of `__typing_unpacked__`?","Supports variadic generics in type annotations"  
"How do you implement a custom async iterator?","Define `__aiter__` returning self and `__anext__` async method"  
"What is the function of `__reduce__` in pickling?","Provides custom reduction function for object serialization"  
"How does Python implement lazy imports?","Using `importlib.util.LazyLoader` or custom import hooks"  
"What is the purpose of `__spec__`?","Stores import system state for modules"  
"How do you create a namespace package?","Omit `__init__.py` and use `pkgutil.extend_path`"  
"What is the role of `__path__`?","Defines package search paths for submodule imports"  
"How does `__file__` differ for built-in modules?","Set to `None` for modules compiled into interpreter"  
"What is the purpose of `__cached__`?","Stores path to compiled bytecode file (.pyc)"  
"How do you implement a module-level `__getattr__`?","Define in module to handle dynamic attribute access"  
"What is the function of `__builtins__`?","Provides access to built-in namespace in modules"  
"How does Python optimize global variable access?","Uses `LOAD_GLOBAL` opcode with fast lookup caching"  
"What is the purpose of `__defaults__`?","Stores default values for function parameters"  
"How do you create a function with keyword-only parameters?","Place after `*` or `*args` in parameter list"  
"What is the role of `__kwdefaults__`?","Stores default values for keyword-only parameters"  
"How does `__closure__` enable late binding?","Captures variables from enclosing scopes in cells"  
"What is the purpose of `__code__`?","References compiled bytecode object of functions"  
"How do you implement a custom code object?","Use `types.CodeType` with specified parameters"  
"What is the function of `__annotations__` in functions?","Stores parameter and return type hints"  
"How does Python implement generator expressions?","As stack-allocated iterators with `GEN_CREATE` opcode"  
"What is the purpose of `__name__` in classes?","Stores class name as string"  
"How do you create a dynamic class with type?","Call `type(name, bases, namespace)`"  
"What is the role of `__bases__`?","Stores tuple of direct parent classes"  
"How does `__mro__` affect method inheritance?","Defines linearized search order for attributes"  
"What is the purpose of `__dict__` for classes?","Stores class attributes and methods"  
"How do you implement a class decorator with arguments?","Use nested functions for decorator factory"  
"What is the function of `__prepare__`?","Creates namespace mapping for class body execution"  
"How does Python optimize attribute access?","Uses `__slots__` for direct storage without dict lookup"  
"What is the purpose of `__weakref__`?","Enables weak references to class instances"  
"How do you create a weak reference proxy?","Use `weakref.proxy()` for call-through references"  
"What is the role of `__finalize__`?","Defines cleanup logic for resource-holding objects"  
"How does `__del__` interact with garbage collection?","Called during GC but order is non-deterministic"  
"What is the purpose of `__getnewargs_ex__`?","Provides arguments for `__new__` during pickling"  
"How do you implement a custom number type?","Define numeric special methods like `__add__`, `__mul__`"  
"What is the function of `__complex__`?","Converts objects to complex numbers"  
"How does Python implement operator overloading?","Through special methods like `__add__` for `+`"  
"What is the purpose of `__format__`?","Implements custom formatting for `format()` and f-strings"  
"How do you create a context manager for file locking?","Use `fcntl.flock` with `__enter__`/`__exit__`"  
"What is the role of `__enter__` in database connections?","Returns cursor object for transaction management"  
"How does `__exit__` handle transaction commits?","Commits on clean exit, rolls back on exceptions"  
"What is the purpose of `__getinitargs__`?","Provides arguments for `__init__` during unpickling"  
"How do you implement a thread-local storage?","Use `threading.local()` or `contextvars.ContextVar`"  
"What is the function of `__thread_local__`?","Not a standard attribute; use `threading.local`"  
"How does Python implement coroutine nesting?","Through `await` chains with coroutine objects"  
"What is the purpose of `__coroutine__`?","Marks generator-based coroutines (legacy)"  
"How do you create a future-like object?","Implement `__await__` method returning iterator"  
"What is the role of `__aiter__` in async generators?","Must return asynchronous iterator object"  
"How does `__anext__` handle termination?","Raises `StopAsyncIteration` at end"  
"What is the purpose of `__aexit__`?","Cleans up resources in async context managers"  
"How do you implement process-based parallelism?","Use `multiprocessing` with `Process` and `Queue`"  
"What is the function of `__getstate__` for multiprocessing?","Customizes object serialization for inter-process communication"  
"How does Python share memory between processes?","Through `multiprocessing.shared_memory` module"  
"What is the purpose of `__setstate__`?","Customizes object restoration during unpickling"  
"How do you create a daemon thread?","Set `thread.daemon = True` before start"  
"What is the role of `__enter__` in locks?","Acquires lock and returns context manager"  
"How does `__exit__` release locks?","Automatically releases lock on context exit"  
"What is the purpose of `__is_coroutine`?","Legacy flag for coroutine detection"  
"How do you implement a custom event loop?","Subclass `asyncio.AbstractEventLoop`"  
"What is the function of `__del__` in resource cleanup?","Unreliable for critical resources; prefer context managers"  
"How does Python implement finalization?","Through `weakref.finalize` for reliable cleanup"  
"What is the purpose of `__fspath__`?","Provides path-like object interface"  
"How do you create a path-like object?","Implement `__fspath__` returning string path"  
"What is the role of `__bytes__` in I/O operations?","Converts objects to bytes for binary output"  
"How does `__index__` enable memoryview access?","Allows objects to be used as buffer indexes"  
"What is the purpose of `__release_buffer__`?","Releases buffer resources in buffer protocol"  
"How do you implement a custom collection?","Inherit from `collections.abc` abstract classes"  
"What is the function of `__len_hint__`?","Provides estimated length for iterators"  
"How does Python optimize container operations?","Uses specialized opcodes like `BUILD_LIST`"  
"What is the purpose of `__missing__`?","Handles missing keys in dict subclasses"  
"How do you create a case-insensitive dictionary?","Override `__getitem__`, `__setitem__` with lowercased keys"  
"What is the role of `__reversed__`?","Optimizes reverse iteration for custom sequences"  
"How does `__contains__` improve membership tests?","Allows O(1) lookups instead of O(n) scanning"  
"What is the purpose of `__hash__`?","Provides hash value for set/dict keys"  
"How do you implement a custom exception format?","Override `__str__` for user-friendly messages"  
"What is the function of `__notes__`?","Stores additional context for exceptions"  
"How does Python chain exceptions?","Sets `__context__` for implicit chaining"  
"What is the purpose of `__suppress_context__`?","Hides exception context in tracebacks"  
"How do you create a warning category?","Subclass `Warning` or built-in warning types"  
"What is the role of `__warningregistry__`?","Tracks suppressed warnings per module"  
"How does `__setattr__` prevent attribute modification?","Raise `AttributeError` for protected attributes"  
"What is the purpose of `__delattr__`?","Handles attribute deletion with `del obj.attr`"  
"How do you implement a non-data descriptor?","Define only `__get__` method"  
"What is the function of `__objclass__`?","References class for built-in methods"  
"How does Python implement property caching?","Through descriptors that compute once per instance"  
"What is the purpose of `__isabstractmethod__`?","Marks methods as abstract in ABCs"  
"How do you create a virtual subclass?","Use `ABCMeta.register()` method"  
"What is the role of `__subclasscheck__`?","Customizes `issubclass()` behavior"  
"How does `__instancecheck__` work?","Customizes `isinstance()` checks"  
"What is the purpose of `__init_subclass__` hooks?","Automates subclass registration"  
"How do you implement a plugin architecture?","Use `importlib.metadata` entry points"  
"What is the function of `__path_hooks__`?","Customizes package path handling"  
"How does Python find module spec?","Through meta path finders and path entry hooks"  
"What is the purpose of `__loader_state__`?","Stores loader-specific state for modules"  
"How do you create a zip importer?","Use `zipimport.zipimporter`"  
"What is the role of `__file__` in packages?","References package `__init__.py` path"  
"How does `__package__` resolve relative imports?","Defines package context for relative imports"  
"What is the purpose of `__spec__.parent`?","Stores parent package name for relative imports"  
"How do you implement a module reload hook?","Override `importlib.reload()` behavior"  
"What is the function of `__cached__`?","Points to compiled bytecode file"  
"How does Python optimize bytecode execution?","Uses computed gotos in eval loop (CPython)"  
"What is the purpose of `__debug__`?","Set to False when running with `-O` flag"  
"How do you create a conditional breakpoint?","Use `breakpoint()` with condition"  
"What is the role of `__trace__`?","Set by `sys.settrace()` for debugging"  
"How does `__sizeof__` report memory usage?","Includes GC overhead for accurate measurement"  
"What is the purpose of `__basicsize__`?","Stores base memory size for types"  
"How do you implement a memory profiler?","Use `tracemalloc` or `pympler`"  
"What is the function of `__itemsize__`?","Stores per-item size for variable-size types"  
"How does Python implement freelists?","Reuses allocated memory for common objects"  
"What is the purpose of `__del__` in cycle breaking?","Breaks reference cycles during GC"  
"How do you create a weak referenceable list?","Subclass list and add `__weakref__` slot"  
"What is the role of `__callback__`?","Not standard; use `weakref.finalize`"  
"How does `__reduce_ex__` handle protocols?","Accepts protocol version for compatibility"  
"What is the purpose of `__getnewargs__`?","Provides arguments for `__new__` during pickling"  
"How do you implement a custom pickle handler?","Define `__reduce__` with callable/arguments tuple"  
"What is the function of `__copy__`?","Implements shallow copy for `copy.copy()`"  
"How does `__deepcopy__` work?","Implements deep copy with memo dictionary"  
"What is the purpose of `__slotnames__`?","Legacy for pickling classes with `__slots__`"  
"How do you create a singleton metaclass?","Override `__call__` to return single instance"  
"What is the role of `__instance__`?","Common name for singleton instance storage"  
"How does `__init_subclass__` enforce constraints?","Raises `TypeError` for invalid subclasses"  
"What is the purpose of `__classcell__`?","Handles super() references in metaclasses"  
"How do you implement a class decorator for methods?","Modify class attributes in decorator"  
"What is the function of `__func__`?","References function object for bound methods"  
"How does Python bind methods?","Creates `method` wrapper at attribute access"  
"What is the purpose of `__self__`?","References instance for bound methods"  
"How do you create an unbound method?","Access method through class (Python 2 legacy)"  
"What is the role of `__func__` in static methods?","References original function"  
"How does `__isabstractmethod__` affect inheritance?","Prevents instantiation if abstract methods exist"  
"What is the purpose of `__abstractmethods__` set?","Tracks abstract methods requiring implementation"  
"How do you comment a single line in Python?","Use the # symbol before the text"  
"What function displays output to the console?","print()"  
"How do you create a list?","Use square brackets: my_list = [1, 2, 3]"  
"What symbol accesses dictionary values?","Square brackets: my_dict['key']"  
"How do you check a variable's type?","Use type(var)"  
"What keyword defines a function?","def"  
"How do you add an element to a list?","Use append(): my_list.append(4)"  
"What function gets user input?","input()"  
"How do you create a tuple?","Use parentheses: my_tuple = (1, 2, 3)"  
"What method converts a string to uppercase?","upper(): 'text'.upper()"  
"How do you round a number?","Use round(): round(3.1415)"  
"What keyword creates a loop?","for or while"  
"How do you get the length of a list?","len(my_list)"  
"What operator performs integer division?","// (double forward slash)"  
"How do you create an empty dictionary?","my_dict = {} or my_dict = dict()"  
"What method removes list elements?","remove() or pop()"  
"How do you reverse a list?","Use reverse(): my_list.reverse()"  
"What function generates number sequences?","range()"  
"How do you open a file for reading?","open('file.txt', 'r')"  
"What module provides math operations?","math"  
"How do you sort a list?","sort(): my_list.sort()"  
"What operator checks equality?","=="  
"How do you combine two strings?","+ operator: 'hello' + 'world'"  
"What method splits a string?","split(): 'a,b,c'.split(',')"  
"How do you create a set?","my_set = {1, 2, 3}"  
"What keyword handles errors?","try and except"  
"How do you check if a key exists?","'key' in my_dict"  
"What function creates a floating-point number?","float()"  
"How do you get the current date?","datetime.date.today()"  
"What module handles file paths?","os.path"  
"How do you remove whitespace from strings?","strip(): ' text '.strip()"  
"What operator checks if an item is in a list?","in"  
"How do you copy a list?","my_copy = my_list.copy()"  
"What method finds a substring?","find(): 'text'.find('ex')"  
"How do you create a class?","class MyClass:"  
"What is the first parameter of instance methods?","self"  
"How do you convert to an integer?","int()"  
"What function creates a string?","str()"  
"How do you count list elements?","count(): my_list.count('a')"  
"What module provides random numbers?","random"  
"How do you format strings?","f-strings: f'Value: {value}'"  
"What operator combines conditions?","and, or"  
"How do you get dictionary keys?","keys(): my_dict.keys()"  
"What method joins list elements?","join(): ','.join(my_list)"  
"How do you create a global variable?","global keyword inside functions"  
"What is the exponentiation operator?","**"  
"How do you remove list duplicates?","Convert to set: list(set(my_list))"  
"What function lists directory contents?","os.listdir()"  
"How do you read a file line-by-line?","for line in open('file.txt'):"  
"What module handles date/time?","datetime"  
"How do you create a multi-line string?","Triple quotes: '''line1\nline2'''"  
"What operator checks inequality?","!="  
"How do you add two numbers?","+ operator: 5 + 3"  
"What method capitalizes a string?","capitalize(): 'text'.capitalize()"  
"How do you check if a list is empty?","not my_list"  
"What function gets absolute value?","abs()"  
"How do you delete a variable?","del var_name"  
"What module handles command-line arguments?","sys"  
"How do you write to a file?","open('file.txt', 'w') then file.write()"  
"What method replaces substrings?","replace(): 'text'.replace('t','T')"  
"How do you create a boolean?","True or False"  
"What operator checks identity?","is"  
"How do you iterate dictionary items?","for key, value in my_dict.items():"  
"What function sums list elements?","sum()"  
"How do you make a number negative?","- operator: -value"  
"What method converts to lowercase?","lower(): 'TEXT'.lower()"  
"How do you exit a loop early?","break"  
"What module provides OS operations?","os"  
"How do you get the last list element?","my_list[-1]"  
"What function finds the maximum value?","max()"  
"How do you create a constant?","Use uppercase: MAX_VALUE = 100"  
"What operator performs modulus?","%"  
"How do you reverse a string?","my_string[::-1]"  
"What method adds elements at specific positions?","insert(): my_list.insert(0, 'a')"  
"How do you skip to next loop iteration?","continue"  
"What module handles JSON?","json"  
"How do you get current working directory?","os.getcwd()"  
"What function creates a list from range?","list(range(5))"  
"How do you delete a list element?","del my_list[0]"  
"What method checks string start?","startswith(): 'text'.startswith('te')"  
"How do you convert list to tuple?","tuple(my_list)"  
"What operator performs bitwise AND?","&"  
"How do you create a nested list?","matrix = [[1,2], [3,4]]"  
"What function gets minimum value?","min()"  
"How do you multiply strings?","* operator: 'a' * 3"  
"What method removes whitespace from ends?","strip()"  
"How do you import specific functions?","from module import function"  
"What module provides system functions?","sys"  
"How do you check string content?","isalpha(), isdigit(), etc."  
"What function creates a dictionary?","dict()"  
"How do you create an empty list?","my_list = [] or my_list = list()"  
"What operator performs logical NOT?","not"  
"How do you get list slices?","my_list[1:4]"  
"What method removes list elements?","pop(): my_list.pop(0)"  
"How do you handle multiple exceptions?","except (TypeError, ValueError):"  
"What module provides time functions?","time"  
"How do you convert to string?","str(42)"  
"What function checks instance type?","isinstance()"  
"How do you add to a set?","add(): my_set.add(4)"  
"What method checks string end?","endswith(): 'text'.endswith('xt')"  
"How do you create a copy of a dictionary?","my_dict.copy()"  
"What operator performs bitwise OR?","|"  
"How do you combine lists?","+ operator or extend()"  
"What function gets character code?","ord('a')"  
"How do you create a range with steps?","range(0, 10, 2)"  
"What method removes set elements?","remove() or discard()"  
"How do you exit a program?","sys.exit()"  
"What module provides regular expressions?","re"  
"How do you check if a file exists?","os.path.exists('file.txt')"  
"What function gets code from character?","chr(97)"  
"How do you create a boolean variable?","flag = True"  
"What operator performs exponentiation?","**"  
"How do you count string occurrences?","count(): 'hello'.count('l')"  
"What method removes dictionary keys?","pop(): my_dict.pop('key')"  
"How do you create a new directory?","os.mkdir('new_dir')"  
"What module handles URLs?","urllib"  
"How do you get the current time?","datetime.datetime.now()"  
"What function reverses iteration?","reversed()"  
"How do you convert to list?","list('abc')"  
"What method checks alphanumeric?","isalnum(): 'abc123'.isalnum()"  
"How do you create a complex number?","3 + 4j"  
"What operator shifts bits left?","<<"  
"How do you clear a list?","clear(): my_list.clear()"  
"What function rounds up?","math.ceil()"  
"How do you get file extension?","os.path.splitext('file.txt')[1]"  
"What module copies objects?","copy"  
"How do you check variable existence?","'var' in locals()"  
"What function gets environment variables?","os.getenv('PATH')"  
"How do you iterate with index?","enumerate(): for i, item in enumerate(items)"  
"What method formats numbers?","format(): '{:.2f}'.format(3.1415)"  
"How do you create a frozen set?","frozenset([1,2,3])"  
"What operator shifts bits right?",">>"  
"How do you get dictionary values?","my_dict.values()"  
"What function rounds down?","math.floor()"  
"How do you change directory?","os.chdir('path')"  
"What module handles command execution?","subprocess"  
"How do you check inheritance?","issubclass(Child, Parent)"  
"What function gets ASCII character?","chr(65)"  
"How do you create a default dictionary?","collections.defaultdict(int)"  
"What method centers a string?","center(): 'text'.center(10)"  
"How do you create a byte string?","b'bytes'"  
"What operator performs bitwise XOR?","^"  
"How do you merge dictionaries?","dict1.update(dict2)"  
"What function calculates square root?","math.sqrt()"  
"How do you rename a file?","os.rename('old', 'new')"  
"What module provides hash functions?","hashlib"  
"How do you check if a string is digit?","'123'.isdigit()"  
"What function gets list index?","index(): my_list.index('item')"  
"How do you create a named tuple?","collections.namedtuple('Point', 'x y')"  
"What method pads strings?","zfill(): '42'.zfill(5)"  
"How do you create a multi-line comment?","Triple-quoted string (not true comment)"  
"What operator performs floor division?","//"  
"How do you sort a list in reverse?","sort(reverse=True)"  
"What function calculates power?","pow(2, 3)"  
"How do you delete a directory?","os.rmdir('dir')"  
"What module provides ZIP handling?","zipfile"  
"How do you check for None?","var is None"  
"What function creates a slice?","slice(1, 5, 2)"  
"How do you create a deque?","collections.deque()"  
"What method justifies text left?","ljust(): 'text'.ljust(10)"  
"How do you create a bytearray?","bytearray(b'bytes')"  
"What operator performs membership test?","in"  
"How do you reverse a list?","reversed() or my_list[::-1]"  
"What function calculates logarithm?","math.log()"  
"How do you get file size?","os.path.getsize('file.txt')"  
"What module handles CSV files?","csv"  
"How do you check for empty string?","not my_string"  
"What function creates complex numbers?","complex(3, 4)"  
"How do you create a counter?","collections.Counter()"  
"What method justifies text right?","rjust(): 'text'.rjust(10)"  
"How do you create a memory view?","memoryview(bytearray)"  
"What operator performs identity test?","is"  
"How do you flatten a nested list?","[item for sublist in nested for item in sublist]"  
"What function calculates factorial?","math.factorial()"  
"How do you copy a file?","shutil.copy('src', 'dst')"  
"What module handles XML?","xml.etree.ElementTree"  
"How do you check if a file is directory?","os.path.isdir('path')"  
"What function gets hexadecimal?","hex(255)"  
"How do you create an ordered dictionary?","collections.OrderedDict()"  
"What method swaps cases?","swapcase(): 'Text'.swapcase()"  
"How do you create a raw string?","r'C:\path'"  
"What operator performs assignment?","="  
"How do you transpose a matrix?","[list(x) for x in zip(*matrix)]"  
"What function gets binary?","bin(10)"  
"How do you move a file?","shutil.move('src', 'dst')"  
"What module handles HTTP?","http"  
"How do you check if a path exists?","os.path.exists('path')"  
"What function gets octal?","oct(8)"  
"How do you create a chain map?","collections.ChainMap()"  
"What method checks title case?","istitle(): 'Title'.istitle()"  
"How do you create a formatted string?","format(): '{} {}'.format(a, b)"  
"What operator performs addition assignment?","+="  
"How do you deepcopy a list?","import copy; copy.deepcopy()"  
"What function calculates hypotenuse?","math.hypot()"  
"How do you delete a file?","os.remove('file.txt')"  
"What module handles SQLite?","sqlite3"  
"How do you check if a variable is defined?","'var' in globals()"  
"What function gets ASCII code?","ord('A')"  
"How do you create a user dictionary?","class MyDict(dict): ..."  
"What method checks whitespace?","isspace(): '   '.isspace()"  
"How do you implement lazy evaluation without generators?","Use closures with mutable state or functools.partial"
"What's the difference between __getattr__ and __getattribute__?","__getattribute__ intercepts all attribute access, __getattr__ only handles missing attributes"
"How would you implement a thread-safe queue without threading.Queue?","Use collections.deque with threading.Lock for synchronization"
"What happens when you override __new__ in a mutable class?","Instance creation is customized before initialization (rare for mutable types)"
"How do descriptor protocols enable SQLAlchemy-style ORM mappings?","Descriptors manage attribute access with database interaction logic"
"Why would you use __prepare__ in a metaclass?","To customize the namespace dictionary during class creation (e.g., OrderedDict)"
"How does Python's MRO handle diamond inheritance?","Uses C3 linearization to maintain consistent method resolution order"
"What's the purpose of __slots__ in exception classes?","Reduces memory overhead for frequently raised exceptions"
"How do you implement negative indexing in a custom sequence?","Override __getitem__ to handle negative indices: index % len(self)"
"Why use contextlib.AbstractContextManager?","Base class for defining context managers with automatic enter/exit methods"
"How would you implement a LRU cache from scratch?","Use OrderedDict with maxsize, moving accessed keys to end"
"What's the difference between __del__ and weakref.finalize?","__del__ is unreliable; finalize guarantees callback execution"
"How does asyncio.gather differ from asyncio.wait?","gather returns results in order; wait returns completed/futures sets"
"Why implement __hash__ when overriding __eq__?","To maintain hashable properties required for dict/set usage"
"How do you make a class support pickle serialization?","Implement __reduce__ or __getstate__/__setstate__ methods"
"What's the purpose of __init_subclass__ in plugin systems?","Automatically registers subclasses during class definition"
"How would you implement a read-only view of a dictionary?","Use types.MappingProxyType"
"Why use @functools.singledispatchmethod?","Enables method overloading based on argument types"
"How does Python's GIL affect multiprocessing vs threading?","Multiprocessing bypasses GIL; threading is limited by it"
"What's the difference between __iter__ and __next__?","__iter__ returns iterator object, __next__ returns next value"
"How would you implement a custom coroutine scheduler?","Use asyncio.AbstractEventLoop with custom task queue"
"Why use __set_name__ with descriptors?","To know which class attribute the descriptor is assigned to"
"How do you handle cyclic references in __del__?","Avoid it; use weakref or context managers instead"
"What's the purpose of __class_getitem__?","Enables class to support generic type hints (e.g., list[int])"
"How would you implement a state machine using context managers?","Use nested contexts with state transition in enter/exit"
"Why use @dataclass(frozen=True)?","Creates immutable objects with hash support"
"How does __getattr__ enable dynamic API proxies?","Intercepts attribute calls to generate requests/responses"
"What's the difference between __mro__ and __bases__?","__mro__ shows full inheritance chain; __bases__ direct parents"
"How would you implement a thread pool without concurrent.futures?","Use queue.Queue with worker threads consuming tasks"
"Why use __post_init__ in dataclasses?","For validation or computed fields after auto-generated init"
"How do you create a context manager that handles multiple resources?","Use contextlib.ExitStack for dynamic resource management"
"What's the purpose of __index__ method?","Enables objects to be used as integer indices for slicing"
"How would you implement a custom import hook?","Create meta_path finder implementing find_spec protocol"
"Why use __subclasshook__ in abstract classes?","Allows non-inherited classes to be considered virtual subclasses"
"How does __init__ differ for immutable types?","Typically implemented in __new__ instead"
"What's the difference between __qualname__ and __name__?","__qualname__ includes class path; __name__ is simple name"
"How would you implement a memoization decorator?","Use closure with dict cache storing func(args) -> result"
"Why use __annotations__ for runtime type checking?","To inspect and validate types during execution"
"How do you create a weak reference dictionary?","Use weakref.WeakValueDictionary"
"What's the purpose of __fspath__?","Provides OS path representation for custom path objects"
"How would you implement a reverse iterator?","Define __reversed__ method returning custom iterator"
"Why use __call__ instead of regular methods?","To make instances callable like functions"
"How does Python's descriptor protocol support properties?","property() is implemented using descriptor methods"
"What's the difference between __str__ and __repr__?","__str__ for end-users; __repr__ for developers/debugging"
"How would you implement a custom exception hierarchy?","Subclass from Exception with domain-specific types"
"Why use __setstate__ for unpickling?","To restore complex state beyond basic attributes"
"How do you make a class support with statements?","Implement __enter__ and __exit__ methods"
"What's the purpose of __missing__ in dict subclasses?","Handles missing key lookups (like defaultdict)"
"How would you implement a binary tree using nested tuples?","(value, left_subtree, right_subtree) with None for leaves"
"Why use __slots__ with __weakref__?","To enable weak references while still saving memory"
"How do you implement a custom string formatter?","Override __format__ to handle format specifiers"
"What's the difference between __len__ and __length_hint__?","__len__ provides exact count; __length_hint__ estimates"
"How would you implement a reactive programming pattern?","Use properties with observer callbacks on value changes"
"Why use __init__ in abstract base classes?","To enforce common initialization for subclasses"
"How does __getitem__ enable slicing?","Handle slice objects in index parameter"
"What's the purpose of __bytes__?","Provides byte representation for bytes() conversion"
"How would you implement a custom numeric type?","Define arithmetic dunder methods (__add__, __mul__, etc.)"
"Why use __prepare__ with metaclasses?","To customize class namespace (e.g., for ordered attributes)"
"How do you create a context manager for database transactions?","__enter__ starts transaction; __exit__ commits/rolls back"
"What's the difference between __getnewargs__ and __getnewargs_ex__?","__getnewargs_ex__ supports keyword arguments"
"How would you implement a custom pattern matcher?","Override __match_args__ for structural pattern matching"
"Why use __init_subclass__ for class registration?","Automatically tracks subclasses for factory patterns"
"How does __delattr__ prevent attribute deletion?","Raise AttributeError for protected attributes"
"What's the purpose of __annotate__ in PEP 649?","Postponed evaluation of type annotations (Python 3.10+)"
"How would you implement a custom coroutine?","Define __await__ method returning iterator"
"Why use __class__ in super()?","Explicitly specifies starting point in MRO"
"How do you implement a thread-local storage?","Use threading.local() or contextvars"
"What's the difference between __mod__ and __rmod__?","__rmod__ handles right-side modulo operations"
"How would you implement a generic function?","Use @functools.singledispatch for type-based dispatch"
"Why use __orig_bases__?","Stores original generic base classes before erasure"
"How do you implement a custom async iterator?","Define __aiter__ and __anext__ async methods"
"What's the purpose of __aenter__ and __aexit__?","For asynchronous context managers (async with)"
"How would you implement a dependency injection framework?","Use metaclasses or decorators to manage dependencies"
"Why use __init__ in enums?","To customize member values and behaviors"
"How does __contains__ optimize membership tests?","Allows O(1) lookups instead of O(n) iteration"
"What's the difference between __sub__ and __rsub__?","__rsub__ handles right-side subtraction"
"How would you implement a custom set type?","Subclass collections.abc.Set and implement required methods"
"Why use __text_signature__?","Provides signature metadata for built-in functions"
"How do you implement a buffered I/O wrapper?","Override read/write methods with buffer management"
"What's the purpose of __dict__ for classes?","Stores class attributes and methods"
"How would you implement a custom package loader?","Implement importlib.abc.Loader methods"
"Why use __final__?","Marks methods/classes as non-overridable (PEP 591)"
"How does __set_name__ work with class decorators?","Provides attribute name to decorator during class creation"
"What's the difference between __get__ and __set__?","__get__ accesses value; __set__ modifies it"
"How would you implement a recursive lock?","Use threading.RLock instead of Lock"
"Why use __call__ in metaclasses?","Customizes class instantiation behavior"
"How do you implement a custom decimal type?","Override numeric dunder methods with fixed-point logic"
"What's the purpose of __complex__?","Converts objects to complex numbers"
"How would you implement a custom memory allocator?","Use ctypes to interface with low-level memory functions"
"Why use __wrapped__ attribute?","References original function when decorated"
"How do you implement a custom exception formatter?","Override __str__ for user-friendly messages"
"What's the difference between __enter__ and __exit__ return?","__exit__ returns bool to suppress exceptions"
"How would you implement a custom JSON encoder?","Subclass json.JSONEncoder and override default method"
"Why use __code__ for dynamic function creation?","To modify or inspect compiled bytecode"
"How does __closure__ enable decorators?","Captures variables from outer scope for inner functions"
"What's the purpose of __annotations__ in modules?","Stores module-level type hints"
"How would you implement a custom comparison mixin?","Define rich comparison methods (__lt__, __eq__, etc.)"
"Why use __init__ in namedtuple?","Not recommended; use _replace for immutables"
"How do you implement a custom async context manager?","Define __aenter__ and __aexit__ async methods"
"What's the difference between __get__ for methods vs functions?","Methods bind instance to function via descriptor"
"How would you implement a custom logging handler?","Subclass logging.Handler and override emit"
"Why use __signature__?","Stores inspectable function signature metadata"
"How does __init__ work with multiple inheritance?","Calls super().init following MRO"
"What's the purpose of __classcell__?","For proper super() support in metaclasses"
"How would you implement a custom config parser?","Use configparser with extended interpolation"
"Why use __slots__ with __dict__?","Contradictory; __slots__ replaces __dict__"
"How do you implement a custom regex matcher?","Override __match__ for pattern matching"
"What's the difference between __iter__ and __aiter__?","__aiter__ for asynchronous iteration"
"How would you implement a custom weak reference?","Use weakref.ref with callback"
"Why use __isabstractmethod__?","Marks abstract methods for ABC validation"
"How do you implement a custom sorting key?","Define __key__ method or use key= in sorted"
"What's the purpose of __abstractmethods__?","Set of abstract method names in ABCs"
"How would you implement a custom XML parser?","Subclass xml.sax.ContentHandler"
"Why use __set__ without __get__?","For write-only descriptors"
"How does __init__ handle keyword-only args?","Same as regular functions; use * separator"
"What's the difference between __call__ and __init__?","__init__ initializes; __call__ makes instances callable"
"How would you implement a custom contextvars manager?","Use contextvars.copy_context() and run"
"Why use __mro_entries__?","For non-class bases in type hints (PEP 560)"
"How do you implement a custom codec?","Register with codecs.register for encoding/decoding"
"What's the purpose of __orig_class__?","References parameterized generic type at runtime"
"How would you implement a custom profiling decorator?","Time function execution using time.perf_counter"
"Why use __init_subclass__ for validation?","Check subclass attributes during creation"
"How does __getattribute__ prevent recursion?","Call object.getattribute(self, name)"
"What's the difference between __new__ and __init__ in metaclasses?","__new__ creates class; __init__ initializes class"
"How would you implement a custom caching decorator?","Store results with expiration using datetime"
"Why use __class_getitem__ for non-generics?","To support runtime type annotations"
"How do you implement a custom coroutine wrapper?","Use types.coroutine or asyncio.coroutine"
"What's the purpose of __parameters__?","Type parameters for generic classes"
"How would you implement a custom test runner?","Subclass unittest.TextTestRunner"
"Why use __slots__ with property decorators?","Saves memory while maintaining property logic"
"How do you implement a custom marshaller?","Define __marshal__ and __unmarshal__ methods"
"What's the difference between __contains__ and __iter__?","__contains__ optimizes 'in'; __iter__ enables iteration"
"How would you implement a custom argparse action?","Subclass argparse.Action and override __call__"
"Why use __init__ with properties?","To initialize underlying attribute values"
"How does __set_name__ help with logging?","Automatically set logger name to class name"
"What's the purpose of __traceback__?","Stores exception traceback for debugging"
"How would you implement a custom FTP client?","Use ftplib.FTP with extended methods"
"Why use __get__ with class methods?","Binds method to class instead of instance"
"How do you implement a custom interpolation?","Override __mod__ for % formatting"
"What's the difference between __enter__ and __aenter__?","__aenter__ is async version for async with"
"How would you implement a custom SMTP handler?","Subclass smtplib.SMTP with added features"
"Why use __init__ in dataclasses with inheritance?","Auto-collects fields from all base classes"
"How does __post_init__ work with properties?","Can set computed properties after initialization"
"What's the purpose of __annotations__ in lambdas?","Lambdas don't support annotations (use def instead)"
"How would you implement a custom memoizing metaclass?","Store instance cache in metaclass"
"Why use __call__ with decorators with arguments?","Three-level nested function: arg -> decorator -> wrapper"
"How do you implement a custom CSV dialect?","Subclass csv.Dialect and register"
"What's the difference between __getstate__ and __reduce__?","__reduce__ offers more control over pickling"
"How would you implement a custom thread pool executor?","Use queue.Queue with fixed worker threads"
"Why use __init_subclass__ for database ORM?","Automatically map subclasses to database tables"
"How do you implement a custom compression wrapper?","Use zlib with __enter__/__exit__ for context"
"What's the purpose of __match_args__?","Defines positional patterns for match statements"
"How would you implement a custom logging filter?","Subclass logging.Filter and override filter"
"Why use __slots__ in abstract base classes?","Reduce memory overhead for ABC instances"
"How does __init__ work with frozen dataclasses?","Initializes fields but blocks post-creation modification"
"What's the difference between __getitem__ and __class_getitem__?","__class_getitem__ for class indexing (generics)"
"How would you implement a custom SSH client?","Use paramiko with extended channel handling"
"Why use __setattr__ for immutable objects?","Raise exception on modification attempts"
"How do you implement a custom memory view?","Define buffer protocol methods"
"What's the purpose of __orig_class__ in generics?","Access runtime type parameters"
"How would you implement a custom HTTP server?","Subclass http.server.BaseHTTPRequestHandler"
"Why use __init__ with enum members?","Customize value initialization (e.g., Color.RED = 1)"
"How does __delattr__ work with properties?","Intercepts del operations on managed attributes"
"What's the difference between __name__ and __qualname__?","__qualname__ includes nesting (e.g., Outer.Inner)"
"How would you implement a custom code generator?","Use ast module to manipulate abstract syntax trees"
"Why use __prepare__ for API DSLs?","Create custom namespace for domain-specific languages"
"How do you implement a custom profiler?","Subclass cProfile.Profile and add reporting"
"What's the purpose of __frozen__ in dataclasses?","No such attribute; frozen is a dataclass parameter"
"How would you implement a custom async protocol?","Use asyncio.Protocol with custom handlers"
"Why use __call__ for functors in math libraries?","Enable function-like behavior for stateful objects"
"How do you implement a custom configuration loader?","Use configparser with custom interpolation"
"What's the difference between __iter__ and __next__ in async?","Async uses __aiter__ and __anext__"
"How would you implement a custom serialization format?","Define __serialize__ and __deserialize__ methods"
"Why use __init_subclass__ for middleware registration?","Auto-register subclasses in framework registry"
"How does __new__ work with immutable types?","Creates and returns instance directly"
"What's the purpose of __annotations__ in class scope?","Stores class-level type hints"
"How would you implement a custom RPC mechanism?","Use sockets with pickle or custom serialization"
"Why use __slots__ in context managers?","Reduce overhead for frequently used contexts"
"How do you implement a custom hashing algorithm?","Override __hash__ with consistent logic"
"What's the difference between __init__ and __new__ in exceptions?","__init__ initializes; __new__ rarely overridden"
"How would you implement a custom web framework router?","Use regex patterns with method dispatch table"
"Why use __call__ in decorators?","Makes decorator object callable like function"
"How does __set_name__ help with dependency injection?","Knows attribute name for dependency resolution"
"What's the purpose of __code__.co_varnames?","Lists function's local variable names"
"How would you implement a custom JWT handler?","Use cryptography with custom claim logic"
"Why use __init__ with type hints?","For constructor parameter annotation only"
"How do you implement a custom event emitter?","Use callback lists with add/remove methods"
"What's the difference between __getattr__ and __dir__?","__dir__ customizes dir() output; __getattr__ handles access"
"How would you implement a custom binary protocol?","Use struct.pack/struct.unpack with headers"
"Why use __class__ in method resolution?","Explicitly control method lookup start point"
"How do you implement a custom AST transformer?","Subclass ast.NodeTransformer"
"What's the purpose of __annotations__ in exec?","Captures type hints in dynamically executed code"
"How would you implement a custom caching decorator with TTL?","Use dictionary with timestamps and cleanup thread"
"Why use __init_subclass__ for schema validation?","Validate subclass structure during definition"
"How does __new__ handle object pooling?","Return existing instances from pool instead of new"
"What's the difference between __init__ and __post_init__?","__post_init__ runs after auto-generated init"
"How would you implement a custom websocket handler?","Use websockets library with async handlers"
"Why use __slots__ in data transfer objects?","Reduce memory for many small objects"
"How do you implement a custom comparator?","Define __lt__, __eq__, etc. for sorting"
"What's the purpose of __match_args__ in pattern matching?","Defines positional attributes for match patterns"
"How does Python's GIL impact multi-threaded CPU-bound programs?","It prevents true parallelism by allowing only one thread to execute bytecode at a time"
"What's the purpose of __slots__ in class definitions?","It reduces memory usage by preventing dynamic attribute dictionaries"
"How do metaclasses enable customization of class creation?","By defining __new__ or __prepare__ methods that intercept class construction"
"What occurs internally when Python encounters if __name__ == '__main__'?","It checks if the module is executed directly rather than imported"
"How does functools.lru_cache optimize recursive functions?","By memoizing function results to avoid redundant calculations"
"What distinguishes shallow copy from deep copy in object duplication?","Shallow copy shares references to nested objects while deep copy creates full clones"
"How does MRO resolve method conflicts in multiple inheritance?","Using C3 linearization to determine method search order"
"Why implement __call__ in a custom class?","To make instances callable like functions with persistent state"
"How do descriptor protocols manage attribute access?","Through __get__, __set__, and __delete__ methods"
"What problem does contextlib.suppress solve?","It temporarily silences specified exceptions within a context block"
"How does asyncio.create_task() enable concurrency?","It schedules coroutines without blocking the event loop"
"What's the purpose of __init_subclass__?","To customize subclass creation without metaclasses"
"How does the walrus operator := work in expressions?","It assigns values to variables while evaluating expressions"
"Why override __hash__ when defining __eq__?","To maintain consistency for object use in dictionaries/sets"
"How do weak references prevent memory leaks?","By allowing object access without preventing garbage collection"
"What optimization does sys.intern() provide?","Deduplicates identical strings in memory"
"How does @dataclass simplify class definitions?","Automatically generates __init__, __repr__, and __eq__ methods"
"What distinguishes __new__ from __init__?","__new__ creates the instance while __init__ initializes it"
"How do assignment expressions affect comprehension scoping?","They leak variables to the enclosing scope"
"Why use collections.defaultdict?","To automatically initialize missing keys with default values"
"How do context variables differ from thread locals?","They maintain state per logical context rather than per thread"
"What's the purpose of __getitem__ beyond indexing?","It enables slicing, iteration, and membership testing"
"How does pathlib.Path improve file operations?","Provides object-oriented path manipulation across OSes"
"What role do __aenter__ and __aexit__ serve?","Manage async resources in async with blocks"
"How does typing.Protocol support duck typing?","Enables structural subtyping for static type checkers"
"Why use enum.auto()?","Automatically assigns incrementing values to enum members"
"How do coroutines differ internally from generators?","They wrap async functions with additional awaitable semantics"
"What's the purpose of __post_init__ in dataclasses?","Executes custom initialization after auto-generated __init__"
"How does @contextlib.contextmanager work?","Transforms generators into context managers via single yield"
"Why create non-data descriptors?","To allow instance-level overriding of class-level attributes"
"How does pattern matching differ from switch statements?","Supports destructuring and type checks in case clauses"
"What problem does importlib.resources solve?","Provides standardized access to package assets"
"How do __prepare__ methods customize namespaces?","Return custom mapping for class attribute storage"
"What's the effect of defining __len__ on an object?","Enables use with len() and boolean conversion"
"How do class methods differ from static methods?","Class methods receive cls while static methods receive no implicit args"
"Why implement the iterator protocol?","To enable custom objects to work in for loops"
"How does functools.partial work?","Creates new functions with pre-bound arguments"
"What's the purpose of __del__ methods?","Perform cleanup when objects are garbage collected"
"How do module reloading mechanisms work?","importlib.reload() re-executes module code while retaining state"
"Why use __all__ in modules?","Controls which names are imported with from module import *"
"How does Python implement integer caching?","Small integers (-5 to 256) are pre-allocated for optimization"
"What distinguishes __str__ from __repr__?","__str__ is user-friendly, __repr__ is unambiguous for developers"
"How do decorators with parameters work?","They require nested function layers to handle arguments"
"Why use contextlib.ExitStack?","Manages multiple context managers dynamically"
"How does asyncio.run() handle event loops?","Creates new loop, runs coroutine, and cleans up resources"
"What's the purpose of __mro__ attribute?","Stores method resolution order for inheritance lookups"
"How do properties prevent attribute validation?","Via @property decorators with getter/setter methods"
"Why implement __enter__ and __exit__ separately?","To create context managers without generator-based shortcuts"
"How does Python implement late binding for closures?","Variables are looked up when inner functions are called"
"What problem does weakref.finalize solve?","Registers callbacks for object finalization"
"How do metaclass conflicts arise?","When multiple metaclasses in inheritance hierarchy aren't compatible"
"Why use __getattr__ over __getattribute__?","__getattr__ only handles missing attributes while __getattribute__ handles all"
"How does enum.Flag work?","Enables bitwise operations on enumeration members"
"What's the purpose of __subclasshook__?","Allows ABCs to define custom subclass checks"
"How do coroutine-based generators work?","Using yield from syntax to delegate to subgenerators"
"Why implement __bytes__ method?","To provide byte representation for bytes() conversion"
"How does functools.cached_property work?","Caches instance-level property values after first access"
"What distinguishes __init__ from __new__ for immutables?","Immutable objects must configure state in __new__"
"How does sys.meta_path customize imports?","Allows custom finders to extend import machinery"
"Why use __index__ method?","Provides integer representation for slice indices"
"How do async comprehensions work?","Using async for with comprehensions in coroutines"
"What's the purpose of __format__ method?","Customizes object formatting in f-strings and format()"
"How does contextvars.Context propagate state?","Maintains separate state for each async task/context"
"Why implement __dir__ method?","Customizes output of dir() for better introspection"
"How do annotation-based type hints affect runtime?","Stored in __annotations__ but don't enforce types"
"What problem does dataclasses.field solve?","Configures per-field behavior in dataclasses"
"How does __set_name__ help descriptors?","Provides awareness of owner class and attribute name"
"Why use __annotations__ programmatically?","To access type hints at runtime for validation"
"How do module-level __getattr__ work?","Handle attribute access for modules (Python 3.7+)"
"What's the purpose of __class_getitem__?","Enables class generic parameterization (e.g., list[int])"
"How does functools.singledispatch work?","Creates generic functions with type-based dispatch"
"Why implement the buffer protocol?","For low-level memory sharing with C extensions"
"How do context manager decorators work?","Combine context managers with function decorators"
"What distinguishes __add__ from __iadd__?","__add__ creates new objects, __iadd__ modifies in-place"
"How does asyncio.Queue facilitate communication?","Provides async FIFO queue for coroutines"
"Why use __init__ in abstract base classes?","To enforce subclass initialization contracts"
"How do exception groups work?","Bundle multiple exceptions for concurrent handling"
"What's the purpose of __orig_bases__?","Stores original generic bases for type introspection"
"How does __reduce__ customize pickling?","Defines how objects are serialized by pickle"
"Why implement __copy__ and __deepcopy__?","To customize object copying behavior"
"How do pattern matching guards work?","Add conditional logic to case statements with if"
"What problem does __init_annotations__ solve?","Post-processes annotations after class creation"
"How does __setstate__ customize unpickling?","Restores object state during deserialization"
"Why use __text_signature__?","Provides signature for C-implemented functions"
"How do async context managers work?","Via __aenter__ and __aexit__ methods"
"What's the purpose of __wrapped__?","References original function under decorators"
"How does __delattr__ prevent attribute deletion?","By intercepting del obj.attr operations"
"Why implement __contains__?","To enable in operator support"
"How do generic alias types work?","Enable runtime representation of list[int] etc"
"What distinguishes __get__ in data vs non-data descriptors?","Data descriptors override instance dictionaries"
"How does contextlib.nullcontext work?","Provides no-op context manager for conditional blocks"
"Why use __slots__ with __dict__?","To allow dynamic attributes while optimizing fixed ones"
"How do annotation scopes work in classes?","Annotations see class-level scope during evaluation"
"What's the purpose of __qualname__?","Provides fully qualified name for classes/functions"
"How does __builtins__ differ from builtins?","__builtins__ is implementation-specific, builtins is standard"
"Why implement __trunc__?","Customizes math.trunc() behavior"
"How do metaclasses interact with dataclasses?","Must be combined carefully due to conflicting behaviors"
"What problem does __getnewargs__ solve?","Preserves state for immutable objects during pickling"
"How does __finalize__ work in pandas?","Propagates metadata in method chains (pandas-specific)"
"Why use __subclasses__?","Returns immediate subclasses of a class"
"How do context manager __exit__ parameters work?","Receive exception details for error handling"
"What's the purpose of __signature__?","Stores inspectable function signatures"
"How does __call__ interact with decorators?","Allows callable instances to decorate functions"
"Why implement __round__?","Customizes round() function behavior"
"How do descriptor instance arguments work?","__get__ receives both instance and owner class"
"What distinguishes __getattr__ from __getattribute__ performance?","__getattribute__ affects every attribute access"
"How does __init__ work in metaclasses?","Initializes class objects rather than instances"
"Why use __prepare__ with OrderedDict?","To preserve class attribute declaration order"
"How do async iterators work?","Via __aiter__ and __anext__ methods"
"What problem does __index__ solve for NumPy?","Enables custom objects to be array indices"
"How does __format_spec__ work?","Parses custom format specifiers in f-strings"
"Why implement __complex__?","Supports conversion to complex numbers"
"How do context manager inheritance work?","Subclasses inherit __enter__/__exit__ unless overridden"
"What's the purpose of __abstractmethods__?","Stores unimplemented abstract methods in ABCs"
"How does __getattr__ work for modules?","Handles missing module attribute lookups"
"Why implement __matmul__?","Supports matrix multiplication operator @"
"How do metaclass __call__ methods work?","Intercept instance creation calls"
"What problem does __init_globals__ solve?","Pre-initializes module globals for imports"
"How does __class__ assignment work?","Changes object class dynamically with constraints"
"Why use __private_methods__?","Convention for name-mangling class-private methods"
"How do pattern matching class patterns work?","Match based on class and attributes"
"What's the purpose of __orig_class__?","References generic class in parameterized instances"
"How does __del__ interact with garbage collection?","Finalizer called when object is GC'd (non-deterministic)"
"Why implement __float__?","Supports conversion to floating-point numbers"
"How do descriptor deletion work?","Via __delete__ method for del operations"
"What distinguishes __set_name__ in metaclasses vs descriptors?","Descriptors receive owner class via __set_name__"
"How does __init__ work for built-in types?","Not customizable; use subclassing instead"
"Why use __annotate__ in expressions?","Proposed syntax for expression annotations (not implemented)"
"How do async generator contexts work?","Require async with for resource management"
"What problem does __init_subclass__ solve for registries?","Automatically registers subclasses"
"How does __ror__ enable operator overloading?","Implements reverse | operator for non-commutative operations"
"Why implement __int__?","Supports conversion to integers via int()"
"How do context manager state sharing work?","Via with statement variables: with cm() as var"
"What's the purpose of __func__?","References function object for bound methods"
"How does __self__ work for methods?","References bound instance for method objects"
"Why implement __coerce__?","Legacy numeric coercion (Python 2 only)"
"How do metaclass conflicts get resolved?","By manually creating combined metaclass"
"What problem does __getstate__ solve?","Customizes pickling beyond default attribute capture"
"How does __reduce_ex__ differ from __reduce__?","Receives protocol version for backward compatibility"
"Why use __all__ with __init__.py?","Controls package-level imports"
"How do pattern matching sequence patterns work?","Match based on sequence length and content"
"What's the purpose of __constraints__?","Stores type constraints for generics"
"How does __del__ handle reference cycles?","Cycles prevent automatic collection; use weakrefs"
"Why implement __ceil__ and __floor__?","Customize math.ceil() and math.floor() behavior"
"How do descriptor precedence work?","Data descriptors override instance dictionaries"
"What distinguishes __get__ in modules vs classes?","Modules don't support descriptors directly"
"How does __init__ work for exceptions?","Initializes exception instances with args"
"Why use __traceback__?","Stores traceback in exception objects"
"How do async for loops work?","Via __aiter__ returning asynchronous iterators"
"What problem does __enter__ without __exit__ cause?","Results in incomplete context manager implementation"
"How does __radd__ enable reverse addition?","Implements other + self when self + other fails"
"Why implement __abs__?","Supports absolute value via abs()"
"How do context manager nesting work?","Multiple with statements create nested contexts"
"What's the purpose of __code__?","Stores compiled bytecode for function objects"
"How does __defaults__ work?","Stores default argument values for functions"
"Why implement __divmod__?","Supports divmod() built-in function"
"How do metaclass inheritance chains work?","Metaclasses inherit from type or other metaclasses"
"What problem does __getnewargs_ex__ solve?","Handles keyword arguments for __new__ in pickling"
"How does __set__ work for class-level access?","Descriptor __get__ receives None for instance"
"Why use __path__?","Package attribute for subpackage discovery"
"How do pattern matching mapping patterns work?","Match based on key-value pairs in mappings"
"What's the purpose of __parameters__?","Stores type parameters for generic classes"
"How does __del__ work with exceptions?","Exceptions during __del__ are printed to stderr"
"Why implement __invert__?","Supports bitwise NOT operator ~"
"How do descriptor class-level access work?","When accessed on class, __get__ receives None for instance"
"What distinguishes __name__ from __qualname__?","__qualname__ includes class path"
"How does __init__ work for enums?","Initializes enum member values"
"Why use __module__?","Indicates defining module for classes/functions"
"How do async comprehensions handle errors?","Exceptions propagate normally in async contexts"
"What problem does __exit__'s return value solve?","True suppresses exceptions, False propagates"
"How does __rsub__ enable reverse subtraction?","Implements other - self when self - other fails"
"Why implement __neg__ and __pos__?","Support unary - and + operators"
"How do context manager reentrancy work?","Most are non-reentrant; require custom implementation"
"What's the purpose of __closure__?","Stores cell variables for closures"
"How does __annotations__ work for classes?","Collects class-level annotations in dictionary"
"Why implement __lshift__ and __rshift__?","Support bit-shift operators << and >>"
"How do metaclass method resolution work?","Metaclass methods override class methods"
"What problem does __init__ in ABCs solve?","Enforces subclass initialization signatures"
"How does __format__ handle format specifiers?","Parses specifier string like :>10"
"Why use __package__?","Helps resolve relative imports correctly"
"How do pattern matching capture variables work?","Assign matched values to variables in case patterns"
"What's the purpose of __type_params__?","Stores type parameters for generic functions"
"How does __del__ work in reference cycles?","GC collects cycles but execution order is non-deterministic"
"Why implement __bool__?","Customizes truth value testing"
"How do descriptor assignment on classes work?","Stores descriptor in class dictionary normally"
"What distinguishes __getattr__ from __getattribute__ safety?","__getattribute__ requires careful implementation to avoid recursion"
"How does __init__ work for namedtuples?","Auto-generated based on field names"
"Why use __annotate__ in PEP 649?","Postponed annotation evaluation (Python 3.10+)"
"How do async generator delegation work?","Using async for with yield from in async generators"
"What problem does __aiter__ returning self solve?","Makes async iterators their own iterators"
"How does __rmul__ enable reverse multiplication?","Implements other * self when self * other fails"
"Why implement __index__ for custom containers?","Allows objects to be used as integer indices"
"How do context manager error propagation work?","Exceptions pass through __exit__ unless suppressed"
"What's the purpose of __dict__ for classes?","Stores class attributes and methods"
"How does __kwdefaults__ work?","Stores keyword-only parameter defaults"
"Why implement __and__, __or__, __xor__?","Support bitwise operators &, |, ^"
"How do metaclass __prepare__ work with annotations?","Can pre-populate namespace before class body execution"
"What problem does __set_name__ solve for decorators?","Allows decorators to know decorated attribute names"
"How does __format__ interact with f-strings?","Called during formatted string conversion"
"Why use __future__ imports?","Enable new language features before default behavior"
"How do you check if a key exists in a dictionary?","Use the in keyword: 'key' in my_dict"
"What's the difference between list.append() and list.extend()?","append() adds single elements, extend() adds iterable items individually"
"How do you reverse a list in-place?","Use list.reverse() method"
"What does the pass keyword do?","Acts as a null operation placeholder in empty code blocks"
"How do you create a virtual environment?","Run python -m venv env_name in terminal"
"What's the purpose of __init__.py files?","Marks directories as Python packages (required pre-Python 3.3)"
"How do you read a file line-by-line?","Use with open(file) as f: for line in f:"
"What's the difference between == and is?","== compares values, is checks object identity"
"How do you convert a string to lowercase?","Use str.lower() method"
"What does sys.argv contain?","List of command-line arguments passed to script"
"How do you remove whitespace from string ends?","str.strip() removes leading/trailing whitespace"
"What's the purpose of if __name__ == '__main__'?","Executes code only when script is run directly"
"How do you sort a dictionary by values?","sorted(dict.items(), key=lambda x: x[1])"
"What does the zip() function do?","Combines multiple iterables into tuples of corresponding elements"
"How do you handle exceptions?","Use try: ... except ExceptionType: ... blocks"
"What's the difference between list and tuple?","Lists are mutable, tuples are immutable"
"How do you create a dictionary from two lists?","dict(zip(keys_list, values_list))"
"What does range(3) generate?","Sequence: 0, 1, 2"
"How do you format strings with variables?","Use f-strings: f'Value: {value}' or str.format()"
"What's the purpose of __init__ method?","Constructor that initializes new object instances"
"How do you check an object's type?","Use type(obj) or isinstance(obj, Class)"
"What are Python decorators?","Functions that modify behavior of other functions"
"How do you make a function accept any number of arguments?","Use *args for positional, **kwargs for keyword arguments"
"What's the difference between break and continue?","break exits loop, continue skips to next iteration"
"How do you convert integer to string?","str(42)"
"What does list.copy() do?","Creates shallow copy of list"
"How do you check string containment?","Use in operator: 'sub' in string"
"What are sets used for?","Store unique elements and perform set operations"
"How do you create a class method?","Use @classmethod decorator with cls parameter"
"What's the purpose of self in classes?","Reference to current class instance"
"How do you iterate dictionary key-value pairs?","for key, value in dict.items():"
"What does string.split() return?","List of substrings split by whitespace or specified separator"
"How do you write list comprehensions?","[x*2 for x in range(5)] creates [0,2,4,6,8]"
"What's the difference between import module and from module import name?","First imports whole module, second imports specific names"
"How do you make a function return multiple values?","Use tuple: return val1, val2 (automatically packed)"
"What are lambda functions?","Anonymous functions: lambda x: x*2"
"How do you handle file not found errors?","Catch FileNotFoundError exception"
"What does dict.get(key, default) do?","Returns value or default if key missing"
"How do you add items to a set?","set.add(item) for single, set.update(items) for multiple"
"What's the purpose of __str__ method?","Defines human-readable string representation of object"
"How do you remove list duplicates?","Convert to set: list(set(original)) (order not preserved)"
"What does os.listdir() return?","List of file/directory names in specified path"
"How do you create a package?","Make directory with __init__.py and module files"
"What's the difference between / and // operators?","/ is float division, // is integer division"
"How do you access environment variables?","Use os.environ['VAR_NAME']"
"What does random.randint(1,10) do?","Generates random integer between 1-10 inclusive"
"How do you capitalize first letter of string?","str.capitalize()"
"What's the purpose of globals() function?","Returns dictionary of current global symbol table"
"How do you check if list is empty?","if not my_list: or if len(my_list) == 0:"
"What are *args and **kwargs used for?","Pass variable number of positional/keyword arguments"
"How do you count occurrences in list?","list.count(item)"
"What does enumerate() do?","Returns (index, value) pairs from iterable"
"How do you install packages with pip?","pip install package_name"
"What's the difference between pop() and remove() for lists?","pop() by index, remove() by value"
"How do you join list elements into string?","str.join(iterable): ', '.join(list)"
"What does math.sqrt() do?","Calculates square root of number"
"How do you create a static method?","Use @staticmethod decorator"
"What's the purpose of super()?","Calls method from parent class"
"How do you get current working directory?","os.getcwd()"
"What are docstrings?","String literals documenting modules, classes, or functions"
"How do you swap two variables?","a, b = b, a"
"What does str.replace(old, new) do?","Replaces all occurrences of substring"
"How do you sort list in descending order?","list.sort(reverse=True) or sorted(list, reverse=True)"
"What's the difference between read(), readline(), and readlines()?","read() entire file, readline() single line, readlines() list of lines"
"How do you make a private class member?","Prefix with __ (name mangling)"
"What does json.loads() do?","Parses JSON string to Python object"
"How do you get current timestamp?","time.time() returns seconds since epoch"
"What's the purpose of __doc__ attribute?","Contains docstring of module, class, or function"
"How do you handle multiple exceptions?","except (TypeError, ValueError) as e:"
"What are module search paths?","sys.path list where Python looks for modules"
"How do you check string start/end?","str.startswith(prefix) / str.endswith(suffix)"
"What does filter(func, iterable) do?","Returns iterator with elements where func(element) is True"
"How do you create a new file?","open('file.txt', 'w') (use 'x' for exclusive creation)"
"What's the difference between isinstance() and type()?","isinstance() accounts for inheritance, type() doesn't"
"How do you make a generator?","Use yield in function: def gen(): yield value"
"What does dict.setdefault(key, default) do?","Returns value if key exists, else sets key to default"
"How do you get command-line input?","input('Prompt: ') returns string"
"What's the purpose of __call__ method?","Makes instances callable like functions"
"How do you convert string to datetime?","datetime.strptime(string, format)"
"What are context managers?","Objects managing resources with __enter__/__exit__"
"How do you flatten list of lists?","[item for sublist in list_of_lists for item in sublist]"
"What does math.floor() do?","Rounds down to nearest integer"
"How do you inherit from multiple classes?","class Child(Parent1, Parent2):"
"What's the difference between 'a' and 'w' file modes?","'a' appends, 'w' overwrites existing content"
"How do you make a read-only property?","Use @property decorator without setter"
"What does collections.Counter do?","Counts hashable objects (returns dict-like object)"
"How do you get file extension?","os.path.splitext(filename)[1]"
"What's the purpose of __len__ method?","Implements len(object) behavior"
"How do you convert bytes to string?","bytes.decode('utf-8')"
"What are magic methods?","Special methods with double underscores (e.g., __init__)"
"How do you create a named tuple?","Point = collections.namedtuple('Point', ['x','y'])"
"What does list.insert(index, item) do?","Inserts item before specified index"
"How do you delete file?","os.remove(path)"
"What's the difference between dict.keys() and dict.values()?","keys() returns view of keys, values() returns values"
"How do you make a constant in Python?","Use ALL_CAPS naming convention (no true constants)"
"What does any(iterable) do?","Returns True if any element is truthy"
"How do you reverse string?","string[::-1] slicing"
"What's the purpose of __file__?","Contains path to current module file"
"How do you measure execution time?","time.time() before/after or timeit module"
"What are class/instance variables?","Class variables shared across instances, instance variables unique per object"
"How do you convert list to tuple?","tuple(my_list)"
"What does map(func, iterable) do?","Applies function to all items in iterable"
"How do you create an empty dictionary?","{} or dict()"
"What's the difference between remove() and del for lists?","remove() by value, del by index or slice"
"How do you get directory of current script?","os.path.dirname(os.path.abspath(__file__))"
"What does str.isdigit() check?","Whether all characters are digits"
"How do you create alias for module?","import numpy as np"
"What's the purpose of __bases__ attribute?","Tuple of base classes for a class"
"How do you convert string to list of characters?","list(string)"
"What are mutable default argument risks?","Defaults are created once, shared across calls"
"How do you merge two dictionaries?","dict1.update(dict2) or {**dict1, **dict2}"
"What does os.path.join() do?","Constructs paths OS-agnostically"
"How do you check if variable is defined?","'var' in locals() or 'var' in globals()"
"What's the difference between abs() and fabs()?","abs() built-in, fabs() from math module (float-only)"
"How do you create a package requirement file?","pip freeze > requirements.txt"
"What does datetime.now() return?","Current local date and time"
"How do you make a class abstract?","Inherit from abc.ABC and use @abstractmethod"
"What's the purpose of __iter__ method?","Makes objects iterable by returning iterator"
"How do you get system platform?","sys.platform"
"What are slots in classes?","__slots__ optimizes memory by preventing __dict__"
"How do you split path into directory and file?","os.path.split(path)"
"What does collections.defaultdict do?","Provides default values for missing keys"
"How do you handle key errors in dictionaries?","dict.get(key) or catch KeyError"
"What's the difference between is and == for None?","Always use is None since None is singleton"
"How do you create a constant class variable?","Define at class level: class MyClass: CONST = 42"
"What does all(iterable) do?","Returns True if all elements are truthy"
"How do you format numbers?","f'{value:.2f}' or format(value, '.2f')"
"What's the purpose of __name__?","Holds name of current module or class"
"How do you create a thread?","threading.Thread(target=function)"
"What are generator expressions?","(x*2 for x in range(5)) returns generator object"
"How do you check if file exists?","os.path.exists(path)"
"What does dict.pop(key) do?","Removes key and returns its value"
"How do you convert seconds to readable time?","time.strftime('%H:%M:%S', time.gmtime(seconds))"
"What's the difference between __str__ and __repr__?","__str__ for users, __repr__ for developers"
"How do you create a shallow copy of dictionary?","dict.copy() or dict(d1)"
"What does set.difference() do?","Returns elements in first set not in others"
"How do you list installed packages?","pip list"
"What's the purpose of __add__ method?","Implements + operator for custom objects"
"How do you get current date?","datetime.date.today()"
"What are decorators with parameters?","Decorators that accept arguments via nested functions"
"How do you remove item from dictionary?","del dict[key] or dict.pop(key)"
"What does round(number, ndigits) do?","Rounds to given decimal places"
"How do you make a function private?","Prefix name with _ (convention only)"
"What's the difference between __init__ and __new__?","__new__ creates instance, __init__ initializes it"
"How do you create multiline string?","Triple quotes: '''Line1\nLine2'''"
"What does list.index(item) return?","First index of item or raises ValueError"
"How do you get absolute path?","os.path.abspath(relative_path)"
"What's the purpose of __dict__?","Dictionary containing object's writable attributes"
"How do you convert string to integer?","int('42')"
"What are Python wheels?","Built distribution format for faster installation"